// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ClinicContext))]
    [Migration("20220109105531_New1")]
    partial class New1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentInterval")
                        .HasColumnType("int");

                    b.Property<string>("Expertise")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AppointmentInterval = 30,
                            Expertise = "قلب",
                            Family = "محسنی",
                            JobAddress = "address1",
                            Name = "علی",
                            Phone = "0912457589"
                        },
                        new
                        {
                            Id = 2L,
                            AppointmentInterval = 15,
                            Expertise = "پوست",
                            Family = "امامی",
                            JobAddress = "address2",
                            Name = "پویا",
                            Phone = "0912358974"
                        },
                        new
                        {
                            Id = 3L,
                            AppointmentInterval = 20,
                            Expertise = "داخلی",
                            Family = "نادری",
                            JobAddress = "address3",
                            Name = "اکرم",
                            Phone = "0912763548"
                        });
                });

            modelBuilder.Entity("Domain.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Family = "محسنی",
                            Name = "رضا",
                            NationalCode = "0014725821",
                            Password = "0912457589",
                            RegisterDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "علی"
                        },
                        new
                        {
                            Id = 2,
                            Family = "امامی",
                            Name = "پوریا",
                            NationalCode = "0032165498",
                            Password = "0912457589",
                            RegisterDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "پویا"
                        },
                        new
                        {
                            Id = 3,
                            Family = "نادری",
                            Name = "مینا",
                            NationalCode = "0085296345",
                            Password = "0912457589",
                            RegisterDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "اکرم"
                        });
                });

            modelBuilder.Entity("Domain.WorkingHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("FromWorkHour")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ToWorkHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DayOfWeek = 0,
                            DoctorId = 1L,
                            FromWorkHour = new TimeSpan(0, 9, 30, 0, 0),
                            ToWorkHour = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2L,
                            DayOfWeek = 6,
                            DoctorId = 2L,
                            FromWorkHour = new TimeSpan(0, 8, 0, 0, 0),
                            ToWorkHour = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3L,
                            DayOfWeek = 1,
                            DoctorId = 3L,
                            FromWorkHour = new TimeSpan(0, 8, 0, 0, 0),
                            ToWorkHour = new TimeSpan(0, 20, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Appointment", b =>
                {
                    b.HasOne("Domain.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Login", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.WorkingHour", b =>
                {
                    b.HasOne("Domain.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
